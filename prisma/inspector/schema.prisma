// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = env("PRISMA_CLIENT_OUTPUT") // e.g., "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  ARCHIUM
  FAMILY_SEARCH
  WIKIPEDIA
  BABYN_YAR
  WEBSITE
  GOOGLE_DRIVE
}

model Archive {
  id                     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                   String                @db.VarChar(10)
  created_at             DateTime              @default(now()) @db.Timestamp(6)
  updated_at             DateTime?             @updatedAt @db.Timestamp(6)
  title                  String?               @db.Text
  info                   String?               @db.Text
  url                    String?               @db.VarChar(255)
  address                String?               @db.VarChar(255)
  phone_number           String?               @db.VarChar(20)
  email                  String?               @db.VarChar(255)
  logo_url               String?               @db.VarChar(255)
  children_count         Int?                  @default(0)
  funds                  Fund[]
  matches                Match[]
  fetches                Fetch[]
  family_search_projects FamilySearchProject[]
  daily_stats            DailyStat[]

  @@index([code])
  @@map("archives")
}

model Fund {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String        @db.VarChar(20)
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime?     @updatedAt @db.Timestamp(6)
  title          String?       @db.Text
  info           String?       @db.Text
  children_count Int?          @default(0)
  archive_id     String        @db.Uuid
  archive        Archive       @relation(fields: [archive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  descriptions   Description[]
  matches        Match[]
  fetches        Fetch[]
  years          FundYear[]

  @@unique([code, archive_id])
  @@index([code])
  @@map("funds")
}

model FundYear {
  fund_id    String @db.Uuid
  fund       Fund   @relation(fields: [fund_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  start_year Int
  end_year   Int

  @@id([fund_id, start_year, end_year])
  @@index([start_year, end_year])
  @@map("fund_years")
}

model Description {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String            @db.VarChar(20)
  created_at     DateTime          @default(now()) @db.Timestamp(6)
  updated_at     DateTime?         @updatedAt @db.Timestamp(6)
  title          String?           @db.Text
  info           String?           @db.Text
  children_count Int?              @default(0)
  fund_id        String            @db.Uuid
  fund           Fund              @relation(fields: [fund_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cases          Case[]
  matches        Match[]
  fetches        Fetch[]
  years          DescriptionYear[]

  @@unique([code, fund_id])
  @@index([code])
  @@map("descriptions")
}

model DescriptionYear {
  description_id String      @db.Uuid
  description    Description @relation(fields: [description_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  start_year     Int
  end_year       Int

  @@id([description_id, start_year, end_year])
  @@index([start_year, end_year])
  @@map("description_years")
}

model Case {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String         @db.VarChar(20)
  full_code      String         @default("")
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?      @updatedAt @db.Timestamp(6)
  title          String?        @db.Text
  info           String?        @db.Text
  tags           String[]
  description_id String         @db.Uuid
  description    Description    @relation(fields: [description_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  matches        Match[]
  fetches        Fetch[]
  locations      CaseLocation[]
  years          CaseYear[]
  authors        CaseAuthor[]

  @@unique([code, description_id])
  @@index([code])
  @@index([description_id])
  @@map("cases")
}

model CaseYear {
  case_id    String @db.Uuid
  case       Case   @relation(fields: [case_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  start_year Int
  end_year   Int

  @@id([case_id, start_year, end_year])
  @@index([start_year, end_year])
  @@map("case_years")
}

model CaseLocation {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lat      Float
  lng      Float
  radius_m Int    @default(0)
  case_id  String @db.Uuid
  case     Case   @relation(fields: [case_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([case_id, lat, lng, radius_m])
  @@map("case_locations")
}

model Author {
  id    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  info  String?
  lat   Float?
  lng   Float?
  tags  String[]
  cases CaseAuthor[]

  @@unique([title, lat, lng])
  @@map("authors")
}

model CaseAuthor {
  case_id   String @db.Uuid
  author_id String @db.Uuid

  case   Case   @relation(fields: [case_id], references: [id])
  author Author @relation(fields: [author_id], references: [id])

  @@id([case_id, author_id])
  @@map("case_authors")
}

model Resource {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime      @default(now()) @db.Timestamp(6)
  updated_at DateTime?     @updatedAt @db.Timestamp(6)
  code       String        @db.VarChar(50)
  title      String?       @db.Text
  info       String?       @db.Text
  url        String?       @db.VarChar(255)
  logo_url   String?       @db.VarChar(255)
  type       ResourceType?
  matches    Match[]
  fetches    Fetch[]

  @@map("resources")
}

model Match {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime?    @updatedAt @db.Timestamp(6)
  resource_id         String       @db.Uuid
  resource            Resource     @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  url                 String?      @db.Text
  api_url             String       @db.Text
  api_params          String?      @db.VarChar(255)
  archive_id          String?      @db.Uuid
  archive             Archive?     @relation(fields: [archive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fund_id             String?      @db.Uuid
  fund                Fund?        @relation(fields: [fund_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  description_id      String?      @db.Uuid
  description         Description? @relation(fields: [description_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  case_id             String?      @db.Uuid
  case                Case?        @relation(fields: [case_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prev_children_count Int?
  children_count      Int?
  full_code           String?

  @@unique([resource_id, archive_id, fund_id, description_id, case_id, api_params])
  @@index([full_code])
  @@index([full_code(ops: raw("gin_trgm_ops"))], type: Gin, name: "full_code_gin_trgm_ops_idx")
  @@map("matches")
}

model Fetch {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime?    @updatedAt @db.Timestamp(6)
  resource_id         String       @db.Uuid
  resource            Resource     @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  api_url             String       @db.VarChar(255)
  api_params          String?      @db.VarChar(255)
  archive_id          String?      @db.Uuid
  archive             Archive?     @relation(fields: [archive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fund_id             String?      @db.Uuid
  fund                Fund?        @relation(fields: [fund_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  description_id      String?      @db.Uuid
  description         Description? @relation(fields: [description_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  case_id             String?      @db.Uuid
  case                Case?        @relation(fields: [case_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children_count      Int?
  prev_children_count Int?

  @@unique([resource_id, archive_id, fund_id, description_id, case_id, api_params])
  @@map("fetches")
}

model User {
  id             String         @unique @db.VarChar(255)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  email          String         @id @db.VarChar(255)
  is_banned      Boolean        @default(false)
  is_admin       Boolean        @default(false)
  user_downloads UserDownload[]

  @@map("users")
}

model UserDownload {
  created_at DateTime @default(now()) @db.Timestamp(6)
  count      Int
  code       String?  @db.VarChar(50)
  base_url   String?  @db.VarChar(255)
  country    String?  @db.VarChar(100)
  user_id    String   @db.VarChar(255)
  user       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, created_at])
  @@map("user_downloads")
}

model FamilySearchPlace {
  id          Int       @id @db.Integer
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @updatedAt @db.Timestamp(6)
  title       String?   @db.VarChar(255)
  total_count Int?

  @@map("family_search_places")
}

model FamilySearchProject {
  id                  String    @id
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @updatedAt @db.Timestamp(6)
  synced_at           DateTime? @db.Timestamp(6)
  archive_id          String?   @db.Uuid
  archive             Archive?  @relation(fields: [archive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children_count      Int?
  prev_children_count Int?

  @@map("family_search_projects")
}

model DailyStat {
  created_at          DateTime @default(now()) @db.Timestamp(4)
  archive_id          String   @db.Uuid
  archive             Archive  @relation(fields: [archive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  family_search_count Int      @default(0) @db.Integer
  archium_count       Int      @default(0) @db.Integer
  babyn_yar_count     Int      @default(0) @db.Integer
  wikipedia_count     Int      @default(0) @db.Integer
  google_drive_count  Int      @default(0) @db.Integer
  website_count       Int      @default(0) @db.Integer

  @@id([archive_id, created_at])
  @@map("daily_stats")
}
